"use strict";function e(e,t,i,n){return new(i||(i=Promise))((function(s,r){function a(e){try{l(n.next(e))}catch(e){r(e)}}function o(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}l((n=n.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;class t{constructor(){this.listeners={}}on(e,t,i){if(this.listeners[e]||(this.listeners[e]=new Set),this.listeners[e].add(t),null==i?void 0:i.once){const i=()=>{this.un(e,i),this.un(e,t)};return this.on(e,i),i}return()=>this.un(e,t)}un(e,t){var i;null===(i=this.listeners[e])||void 0===i||i.delete(t)}once(e,t){return this.on(e,t,{once:!0})}unAll(){this.listeners={}}emit(e,...t){this.listeners[e]&&this.listeners[e].forEach((e=>e(...t)))}}class i extends t{constructor(e){super(),this.subscriptions=[],this.isDestroyed=!1,this.options=e}onInit(){}_init(e){this.isDestroyed&&(this.subscriptions=[],this.isDestroyed=!1),this.wavesurfer=e,this.onInit()}destroy(){this.emit("destroy"),this.subscriptions.forEach((e=>e())),this.subscriptions=[],this.isDestroyed=!0,this.wavesurfer=void 0}}function n(e,t){const i=t.xmlns?document.createElementNS(t.xmlns,e):document.createElement(e);for(const[e,s]of Object.entries(t))if("children"===e&&s)for(const[e,t]of Object.entries(s))t instanceof Node?i.appendChild(t):"string"==typeof t?i.appendChild(document.createTextNode(t)):i.appendChild(n(e,t));else"style"===e?Object.assign(i.style,s):"textContent"===e?i.textContent=s:i.setAttribute(e,s.toString());return i}function s(e,t,i){const s=n(e,t||{});return null==i||i.appendChild(s),s}const r=1e3*Math.log(10)/107.939;function a(e){return 2595*Math.log10(1+e/700)}function o(e){return 700*(Math.pow(10,e/2595)-1)}function l(e){return Math.log10(Math.max(1,e))}function h(e){return Math.pow(10,e)}function f(e){let t=26.81*e/(1960+e)-.53;return t<2&&(t+=.15*(2-t)),t>20.1&&(t+=.22*(t-20.1)),t}function u(e){return e<2&&(e=(e-.3)/.85),e>20.1&&(e=(e+4.422)/1.22),(e+.53)/(26.28-e)*1960}function c(e){return r*Math.log10(1+.00437*e)}function d(e){return(Math.pow(10,e/r)-1)/.00437}function p(e,t){switch(t){case"mel":return a(e);case"logarithmic":return l(e);case"bark":return f(e);case"erb":return c(e);default:return e}}function m(e,t,i,n,s){const r=n(0),a=n(i/2),o=Array.from({length:e},(()=>Array(t/2+1).fill(0))),l=i/t;for(let t=0;t<e;t++){let i=s(r+t/e*(a-r)),n=Math.floor(i/l),h=n*l,f=(i-h)/((n+1)*l-h);o[t][n]=1-f,o[t][n+1]=f}return o}function g(e,t){const i=t.length,n=Float32Array.from({length:i},(()=>0));for(let s=0;s<i;s++)for(let i=0;i<e.length;i++)n[s]+=e[i]*t[s][i];return n}function b(e,t,i,n){switch(this.bufferSize=e,this.sampleRate=t,this.bandwidth=2/e*(t/2),this.sinTable=new Float32Array(e),this.cosTable=new Float32Array(e),this.windowValues=new Float32Array(e),this.reverseTable=new Uint32Array(e),this.peakBand=0,this.peak=0,i){case"bartlett":for(s=0;s<e;s++)this.windowValues[s]=2/(e-1)*((e-1)/2-Math.abs(s-(e-1)/2));break;case"bartlettHann":for(s=0;s<e;s++)this.windowValues[s]=.62-.48*Math.abs(s/(e-1)-.5)-.38*Math.cos(2*Math.PI*s/(e-1));break;case"blackman":for(n=n||.16,s=0;s<e;s++)this.windowValues[s]=(1-n)/2-.5*Math.cos(2*Math.PI*s/(e-1))+n/2*Math.cos(4*Math.PI*s/(e-1));break;case"cosine":for(s=0;s<e;s++)this.windowValues[s]=Math.cos(Math.PI*s/(e-1)-Math.PI/2);break;case"gauss":for(n=n||.25,s=0;s<e;s++)this.windowValues[s]=Math.pow(Math.E,-.5*Math.pow((s-(e-1)/2)/(n*(e-1)/2),2));break;case"hamming":for(s=0;s<e;s++)this.windowValues[s]=.54-.46*Math.cos(2*Math.PI*s/(e-1));break;case"hann":case void 0:for(s=0;s<e;s++)this.windowValues[s]=.5*(1-Math.cos(2*Math.PI*s/(e-1)));break;case"lanczoz":for(s=0;s<e;s++)this.windowValues[s]=Math.sin(Math.PI*(2*s/(e-1)-1))/(Math.PI*(2*s/(e-1)-1));break;case"rectangular":for(s=0;s<e;s++)this.windowValues[s]=1;break;case"triangular":for(s=0;s<e;s++)this.windowValues[s]=2/e*(e/2-Math.abs(s-(e-1)/2));break;default:throw Error("No such window function '"+i+"'")}for(var s,r=1,a=e>>1;r<e;){for(s=0;s<r;s++)this.reverseTable[s+r]=this.reverseTable[s]+a;r<<=1,a>>=1}for(s=0;s<e;s++)this.sinTable[s]=Math.sin(-Math.PI/s),this.cosTable[s]=Math.cos(-Math.PI/s);this.calculateSpectrum=function(e){var t,i,n,s=this.bufferSize,r=this.cosTable,a=this.sinTable,o=this.reverseTable,l=new Float32Array(s),h=new Float32Array(s),f=2/this.bufferSize,u=Math.sqrt,c=new Float32Array(s/2),d=Math.floor(Math.log(s)/Math.LN2);if(Math.pow(2,d)!==s)throw"Invalid buffer size, must be a power of 2.";if(s!==e.length)throw"Supplied buffer is not the same size as defined FFT. FFT Size: "+s+" Buffer Size: "+e.length;for(var p,m,g,b,w,v,S,M,k=1,P=0;P<s;P++)l[P]=e[o[P]]*this.windowValues[o[P]],h[P]=0;for(;k<s;){p=r[k],m=a[k],g=1,b=0;for(var z=0;z<k;z++){for(P=z;P<s;)v=g*l[w=P+k]-b*h[w],S=g*h[w]+b*l[w],l[w]=l[P]-v,h[w]=h[P]-S,l[P]+=v,h[P]+=S,P+=k<<1;g=(M=g)*p-b*m,b=M*m+b*p}k<<=1}P=0;for(var T=s/2;P<T;P++)(n=f*u((t=l[P])*t+(i=h[P])*i))>this.peak&&(this.peakBand=P,this.peak=n),c[P]=n;return c}}class w extends i{static create(e){return new w(e||{})}constructor(e){var t,i;super(e),this.segments=new Map,this.buffer=null,this.currentPosition=0,this.pixelsPerSecond=0,this.isRendering=!1,this.renderTimeout=null,this.fft=null,this.progressiveLoadTimeout=null,this.isProgressiveLoading=!1,this.nextProgressiveSegmentTime=0,this.worker=null,this.workerPromises=new Map,this.workerBlobUrl=null,this.qualityUpdateTimeout=null,this._onWrapperClick=e=>{const t=this.wrapper.getBoundingClientRect(),i=(e.clientX-t.left)/t.width;this.emit("click",i)},this.container="string"==typeof e.container?document.querySelector(e.container):e.container,this.setupColorMap(e.colorMap),this.fftSamples=e.fftSamples||512,this.height=e.height||200,this.noverlap=e.noverlap||null,this.windowFunc=e.windowFunc||"hann",this.alpha=e.alpha,this.frequencyMin=e.frequencyMin||0,this.frequencyMax=e.frequencyMax||0,this.gainDB=null!==(t=e.gainDB)&&void 0!==t?t:20,this.rangeDB=null!==(i=e.rangeDB)&&void 0!==i?i:80,this.scale=e.scale||"mel",this.windowSize=e.windowSize||30,this.bufferSize=e.bufferSize||5e3,this.progressiveLoading=!0===e.progressiveLoading,this.useWebWorker=!0===e.useWebWorker&&"undefined"!=typeof window,this.numMelFilters=this.fftSamples/2,this.numLogFilters=this.fftSamples/2,this.numBarkFilters=this.fftSamples/2,this.numErbFilters=this.fftSamples/2,this.createWrapper(),this.createCanvas(),this.useWebWorker&&this.initializeWorker()}initializeWorker(){if("undefined"!=typeof window&&"undefined"!=typeof Worker)try{const e=this.createWorkerBlob(),t=URL.createObjectURL(e);this.worker=new Worker(t),this.worker.onmessage=e=>{const{type:t,id:i,result:n,error:s}=e.data;if("frequenciesResult"===t){const e=this.workerPromises.get(i);e&&(this.workerPromises.delete(i),s?e.reject(new Error(s)):e.resolve(n))}},this.worker.onerror=e=>{console.warn("Spectrogram worker error, falling back to main thread:",e),URL.revokeObjectURL(t),this.worker=null},this.workerBlobUrl=t}catch(e){console.warn("Failed to initialize worker, falling back to main thread:",e),this.worker=null}else console.warn("Worker not available in this environment, using main thread calculation")}createWorkerBlob(){return new Blob(["\n/**\n * Web Worker for Windowed Spectrogram Plugin\n * Handles FFT calculations for frequency analysis\n */\n\n// FFT Implementation - Based on https://github.com/corbanbrook/dsp.js\nfunction FFT(bufferSize, sampleRate, windowFunc, alpha) {\n  this.bufferSize = bufferSize\n  this.sampleRate = sampleRate\n  this.bandwidth = (2 / bufferSize) * (sampleRate / 2)\n\n  this.sinTable = new Float32Array(bufferSize)\n  this.cosTable = new Float32Array(bufferSize)\n  this.windowValues = new Float32Array(bufferSize)\n  this.reverseTable = new Uint32Array(bufferSize)\n\n  this.peakBand = 0\n  this.peak = 0\n\n  var i\n  switch (windowFunc) {\n    case 'bartlett':\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] = (2 / (bufferSize - 1)) * ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2))\n      }\n      break\n    case 'bartlettHann':\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] =\n          0.62 - 0.48 * Math.abs(i / (bufferSize - 1) - 0.5) - 0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1))\n      }\n      break\n    case 'blackman':\n      alpha = alpha || 0.16\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] =\n          (1 - alpha) / 2 -\n          0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\n          (alpha / 2) * Math.cos((4 * Math.PI * i) / (bufferSize - 1))\n      }\n      break\n    case 'cosine':\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] = Math.cos((Math.PI * i) / (bufferSize - 1) - Math.PI / 2)\n      }\n      break\n    case 'gauss':\n      alpha = alpha || 0.25\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] = Math.pow(\n          Math.E,\n          -0.5 * Math.pow((i - (bufferSize - 1) / 2) / ((alpha * (bufferSize - 1)) / 2), 2),\n        )\n      }\n      break\n    case 'hamming':\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] = 0.54 - 0.46 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1))\n      }\n      break\n    case 'hann':\n    case undefined:\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] = 0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)))\n      }\n      break\n    case 'lanczoz':\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] =\n          Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) / (Math.PI * ((2 * i) / (bufferSize - 1) - 1))\n      }\n      break\n    case 'rectangular':\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] = 1\n      }\n      break\n    case 'triangular':\n      for (i = 0; i < bufferSize; i++) {\n        this.windowValues[i] = (2 / bufferSize) * (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2))\n      }\n      break\n    default:\n      throw Error(\"No such window function '\" + windowFunc + \"'\")\n  }\n\n  var limit = 1\n  var bit = bufferSize >> 1\n  var i\n\n  while (limit < bufferSize) {\n    for (i = 0; i < limit; i++) {\n      this.reverseTable[i + limit] = this.reverseTable[i] + bit\n    }\n\n    limit = limit << 1\n    bit = bit >> 1\n  }\n\n  for (i = 0; i < bufferSize; i++) {\n    this.sinTable[i] = Math.sin(-Math.PI / i)\n    this.cosTable[i] = Math.cos(-Math.PI / i)\n  }\n\n  this.calculateSpectrum = function (buffer) {\n    var bufferSize = this.bufferSize,\n      cosTable = this.cosTable,\n      sinTable = this.sinTable,\n      reverseTable = this.reverseTable,\n      real = new Float32Array(bufferSize),\n      imag = new Float32Array(bufferSize),\n      bSi = 2 / this.bufferSize,\n      sqrt = Math.sqrt,\n      rval,\n      ival,\n      mag,\n      spectrum = new Float32Array(bufferSize / 2)\n\n    var k = Math.floor(Math.log(bufferSize) / Math.LN2)\n\n    if (Math.pow(2, k) !== bufferSize) {\n      throw 'Invalid buffer size, must be a power of 2.'\n    }\n    if (bufferSize !== buffer.length) {\n      throw (\n        'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\n        bufferSize +\n        ' Buffer Size: ' +\n        buffer.length\n      )\n    }\n\n    var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal\n\n    for (var i = 0; i < bufferSize; i++) {\n      real[i] = buffer[reverseTable[i]] * this.windowValues[reverseTable[i]]\n      imag[i] = 0\n    }\n\n    while (halfSize < bufferSize) {\n      phaseShiftStepReal = cosTable[halfSize]\n      phaseShiftStepImag = sinTable[halfSize]\n\n      currentPhaseShiftReal = 1\n      currentPhaseShiftImag = 0\n\n      for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n        var i = fftStep\n\n        while (i < bufferSize) {\n          off = i + halfSize\n          tr = currentPhaseShiftReal * real[off] - currentPhaseShiftImag * imag[off]\n          ti = currentPhaseShiftReal * imag[off] + currentPhaseShiftImag * real[off]\n\n          real[off] = real[i] - tr\n          imag[off] = imag[i] - ti\n          real[i] += tr\n          imag[i] += ti\n\n          i += halfSize << 1\n        }\n\n        tmpReal = currentPhaseShiftReal\n        currentPhaseShiftReal = tmpReal * phaseShiftStepReal - currentPhaseShiftImag * phaseShiftStepImag\n        currentPhaseShiftImag = tmpReal * phaseShiftStepImag + currentPhaseShiftImag * phaseShiftStepReal\n      }\n\n      halfSize = halfSize << 1\n    }\n\n    for (var i = 0, N = bufferSize / 2; i < N; i++) {\n      rval = real[i]\n      ival = imag[i]\n      mag = bSi * sqrt(rval * rval + ival * ival)\n\n      if (mag > this.peak) {\n        this.peakBand = i\n        this.peak = mag\n      }\n      spectrum[i] = mag\n    }\n    return spectrum\n  }\n}\n\n// Global FFT instance (reused for performance)\nlet fft = null\n\nconst ERB_A = (1000 * Math.log(10)) / (24.7 * 4.37)\n// Frequency scaling functions\nfunction hzToMel(hz) { return 2595 * Math.log10(1 + hz / 700) }\nfunction melToHz(mel) { return 700 * (Math.pow(10, mel / 2595) - 1) }\nfunction hzToLog(hz) { return Math.log10(Math.max(1, hz)) }\nfunction logToHz(log) { return Math.pow(10, log) }\nfunction hzToBark(hz) {\n  let bark = (26.81 * hz) / (1960 + hz) - 0.53\n  if (bark < 2) bark += 0.15 * (2 - bark)\n  if (bark > 20.1) bark += 0.22 * (bark - 20.1)\n  return bark\n}\nfunction barkToHz(bark) {\n  if (bark < 2) bark = (bark - 0.3) / 0.85\n  if (bark > 20.1) bark = (bark + 4.422) / 1.22\n  return 1960 * ((bark + 0.53) / (26.28 - bark))\n}\nfunction hzToErb(hz) { return ERB_A * Math.log10(1 + hz * 0.00437) }\nfunction erbToHz(erb) { return (Math.pow(10, erb / ERB_A) - 1) / 0.00437 }\n\nfunction createFilterBank(\n  numFilters,\n  fftSamples,\n  sampleRate,\n  hzToScale,\n  scaleToHz,\n) {\n  const filterMin = hzToScale(0)\n  const filterMax = hzToScale(sampleRate / 2)\n  const filterBank = Array.from({ length: numFilters }, () => Array(fftSamples / 2 + 1).fill(0))\n  const scale = sampleRate / fftSamples\n  \n  for (let i = 0; i < numFilters; i++) {\n    let hz = scaleToHz(filterMin + (i / numFilters) * (filterMax - filterMin))\n    let j = Math.floor(hz / scale)\n    let hzLow = j * scale\n    let hzHigh = (j + 1) * scale\n    let r = (hz - hzLow) / (hzHigh - hzLow)\n    filterBank[i][j] = 1 - r\n    filterBank[i][j + 1] = r\n  }\n  return filterBank\n}\n\nfunction applyFilterBank(fftPoints, filterBank) {\n  const numFilters = filterBank.length\n  const logSpectrum = Float32Array.from({ length: numFilters }, () => 0)\n  for (let i = 0; i < numFilters; i++) {\n    for (let j = 0; j < fftPoints.length; j++) {\n      logSpectrum[i] += fftPoints[j] * filterBank[i][j]\n    }\n  }\n  return logSpectrum\n}\n\n// Worker message handler\nself.onmessage = function(e) {\n  const { type, id, audioData, options } = e.data\n  \n  if (type === 'calculateFrequencies') {\n    try {\n      const result = calculateFrequencies(audioData, options)\n      self.postMessage({\n        type: 'frequenciesResult',\n        id: id,\n        result: result\n      })\n    } catch (error) {\n      self.postMessage({\n        type: 'frequenciesResult',\n        id: id,\n        error: error instanceof Error ? error.message : String(error)\n      })\n    }\n  }\n}\n\n/**\n * Calculate frequency data for audio channels\n */\nfunction calculateFrequencies(audioChannels, options) {\n  const {\n    startTime, endTime, sampleRate, fftSamples, windowFunc, alpha,\n    noverlap, scale, gainDB, rangeDB, splitChannels\n  } = options\n\n  const startSample = Math.floor(startTime * sampleRate)\n  const endSample = Math.floor(endTime * sampleRate)\n  const channels = splitChannels ? audioChannels.length : 1\n\n  // Initialize FFT (reuse if possible for performance)\n  if (!fft || fft.bufferSize !== fftSamples) {\n    fft = new FFT(fftSamples, sampleRate, windowFunc, alpha)\n  }\n\n  // Create filter bank based on scale (same logic as main thread)\n  let filterBank = null\n  const numFilters = fftSamples / 2 // Same as main thread\n  \n  switch (scale) {\n    case 'mel':\n      filterBank = createFilterBank(numFilters, fftSamples, sampleRate, hzToMel, melToHz)\n      break\n    case 'logarithmic':\n      filterBank = createFilterBank(numFilters, fftSamples, sampleRate, hzToLog, logToHz)\n      break\n    case 'bark':\n      filterBank = createFilterBank(numFilters, fftSamples, sampleRate, hzToBark, barkToHz)\n      break\n    case 'erb':\n      filterBank = createFilterBank(numFilters, fftSamples, sampleRate, hzToErb, erbToHz)\n      break\n    case 'linear':\n    default:\n      // No filter bank for linear scale\n      filterBank = null\n      break\n  }\n\n  // Calculate hop size\n  let actualNoverlap = noverlap || Math.max(0, Math.round(fftSamples * 0.5))\n  const maxOverlap = fftSamples * 0.5\n  actualNoverlap = Math.min(actualNoverlap, maxOverlap)\n  const minHopSize = Math.max(64, fftSamples * 0.25)\n  const hopSize = Math.max(minHopSize, fftSamples - actualNoverlap)\n\n  const frequencies = []\n\n  for (let c = 0; c < channels; c++) {\n    const channelData = audioChannels[c]\n    const channelFreq = []\n\n    for (let sample = startSample; sample + fftSamples < endSample; sample += hopSize) {\n      const segment = channelData.slice(sample, sample + fftSamples)\n      let spectrum = fft.calculateSpectrum(segment)\n      \n      // Apply filter bank if specified (same as main thread)\n      if (filterBank) {\n        spectrum = applyFilterBank(spectrum, filterBank)\n      }\n\n      // Convert to uint8 color indices\n      const freqBins = new Uint8Array(spectrum.length)\n      const gainPlusRange = gainDB + rangeDB\n      \n      for (let j = 0; j < spectrum.length; j++) {\n        const magnitude = spectrum[j] > 1e-12 ? spectrum[j] : 1e-12\n        const valueDB = 20 * Math.log10(magnitude)\n        \n        if (valueDB < -gainPlusRange) {\n          freqBins[j] = 0\n        } else if (valueDB > -gainDB) {\n          freqBins[j] = 255\n        } else {\n          freqBins[j] = Math.round(((valueDB + gainDB) / rangeDB) * 255)\n        }\n      }\n      channelFreq.push(freqBins)\n    }\n    frequencies.push(channelFreq)\n  }\n\n  return frequencies\n}\n"],{type:"application/javascript"})}setupColorMap(e){if(e&&"string"!=typeof e){if(e.length<256)throw new Error("Colormap must contain 256 elements");this.colorMap=e}else{const t=e||"roseus";switch(t){case"gray":this.colorMap=[];for(let e=0;e<256;e++){const t=(255-e)/256;this.colorMap.push([t,t,t,1])}break;case"igray":this.colorMap=[];for(let e=0;e<256;e++){const t=e/256;this.colorMap.push([t,t,t,1])}break;case"roseus":this.colorMap=[[.004528,.004341,.004307,1],[.005625,.006156,.00601,1],[.006628,.008293,.008161,1],[.007551,.010738,.01079,1],[.008382,.013482,.013941,1],[.009111,.01652,.017662,1],[.009727,.019846,.022009,1],[.010223,.023452,.027035,1],[.010593,.027331,.032799,1],[.010833,.031475,.039361,1],[.010941,.035875,.046415,1],[.010918,.04052,.053597,1],[.010768,.045158,.060914,1],[.010492,.049708,.068367,1],[.010098,.054171,.075954,1],[.009594,.058549,.083672,1],[.008989,.06284,.091521,1],[.008297,.067046,.099499,1],[.00753,.071165,.107603,1],[.006704,.075196,.11583,1],[.005838,.07914,.124178,1],[.004949,.082994,.132643,1],[.004062,.086758,.141223,1],[.003198,.09043,.149913,1],[.002382,.09401,.158711,1],[.001643,.097494,.167612,1],[.001009,.100883,.176612,1],[514e-6,.104174,.185704,1],[187e-6,.107366,.194886,1],[66e-6,.110457,.204151,1],[186e-6,.113445,.213496,1],[587e-6,.116329,.222914,1],[.001309,.119106,.232397,1],[.002394,.121776,.241942,1],[.003886,.124336,.251542,1],[.005831,.126784,.261189,1],[.008276,.12912,.270876,1],[.011268,.131342,.280598,1],[.014859,.133447,.290345,1],[.0191,.135435,.300111,1],[.024043,.137305,.309888,1],[.029742,.139054,.319669,1],[.036252,.140683,.329441,1],[.043507,.142189,.339203,1],[.050922,.143571,.348942,1],[.058432,.144831,.358649,1],[.066041,.145965,.368319,1],[.073744,.146974,.377938,1],[.081541,.147858,.387501,1],[.089431,.148616,.396998,1],[.097411,.149248,.406419,1],[.105479,.149754,.415755,1],[.113634,.150134,.424998,1],[.121873,.150389,.434139,1],[.130192,.150521,.443167,1],[.138591,.150528,.452075,1],[.147065,.150413,.460852,1],[.155614,.150175,.469493,1],[.164232,.149818,.477985,1],[.172917,.149343,.486322,1],[.181666,.148751,.494494,1],[.190476,.148046,.502493,1],[.199344,.147229,.510313,1],[.208267,.146302,.517944,1],[.217242,.145267,.52538,1],[.226264,.144131,.532613,1],[.235331,.142894,.539635,1],[.24444,.141559,.546442,1],[.253587,.140131,.553026,1],[.262769,.138615,.559381,1],[.271981,.137016,.5655,1],[.281222,.135335,.571381,1],[.290487,.133581,.577017,1],[.299774,.131757,.582404,1],[.30908,.129867,.587538,1],[.318399,.12792,.592415,1],[.32773,.125921,.597032,1],[.337069,.123877,.601385,1],[.346413,.121793,.605474,1],[.355758,.119678,.609295,1],[.365102,.11754,.612846,1],[.374443,.115386,.616127,1],[.383774,.113226,.619138,1],[.393096,.111066,.621876,1],[.402404,.108918,.624343,1],[.411694,.106794,.62654,1],[.420967,.104698,.628466,1],[.430217,.102645,.630123,1],[.439442,.100647,.631513,1],[.448637,.098717,.632638,1],[.457805,.096861,.633499,1],[.46694,.095095,.6341,1],[.47604,.093433,.634443,1],[.485102,.091885,.634532,1],[.494125,.090466,.63437,1],[.503104,.08919,.633962,1],[.512041,.088067,.633311,1],[.520931,.087108,.63242,1],[.529773,.086329,.631297,1],[.538564,.085738,.629944,1],[.547302,.085346,.628367,1],[.555986,.085162,.626572,1],[.564615,.08519,.624563,1],[.573187,.085439,.622345,1],[.581698,.085913,.619926,1],[.590149,.086615,.617311,1],[.598538,.087543,.614503,1],[.606862,.0887,.611511,1],[.61512,.090084,.608343,1],[.623312,.09169,.605001,1],[.631438,.093511,.601489,1],[.639492,.095546,.597821,1],[.647476,.097787,.593999,1],[.655389,.100226,.590028,1],[.66323,.102856,.585914,1],[.670995,.105669,.581667,1],[.678686,.108658,.577291,1],[.686302,.111813,.57279,1],[.69384,.115129,.568175,1],[.7013,.118597,.563449,1],[.708682,.122209,.558616,1],[.715984,.125959,.553687,1],[.723206,.12984,.548666,1],[.730346,.133846,.543558,1],[.737406,.13797,.538366,1],[.744382,.142209,.533101,1],[.751274,.146556,.527767,1],[.758082,.151008,.522369,1],[.764805,.155559,.516912,1],[.771443,.160206,.511402,1],[.777995,.164946,.505845,1],[.784459,.169774,.500246,1],[.790836,.174689,.494607,1],[.797125,.179688,.488935,1],[.803325,.184767,.483238,1],[.809435,.189925,.477518,1],[.815455,.19516,.471781,1],[.821384,.200471,.466028,1],[.827222,.205854,.460267,1],[.832968,.211308,.454505,1],[.838621,.216834,.448738,1],[.844181,.222428,.442979,1],[.849647,.22809,.43723,1],[.855019,.233819,.431491,1],[.860295,.239613,.425771,1],[.865475,.245471,.420074,1],[.870558,.251393,.414403,1],[.875545,.25738,.408759,1],[.880433,.263427,.403152,1],[.885223,.269535,.397585,1],[.889913,.275705,.392058,1],[.894503,.281934,.386578,1],[.898993,.288222,.381152,1],[.903381,.294569,.375781,1],[.907667,.300974,.370469,1],[.911849,.307435,.365223,1],[.915928,.313953,.360048,1],[.919902,.320527,.354948,1],[.923771,.327155,.349928,1],[.927533,.333838,.344994,1],[.931188,.340576,.340149,1],[.934736,.347366,.335403,1],[.938175,.354207,.330762,1],[.941504,.361101,.326229,1],[.944723,.368045,.321814,1],[.947831,.375039,.317523,1],[.950826,.382083,.313364,1],[.953709,.389175,.309345,1],[.956478,.396314,.305477,1],[.959133,.403499,.301766,1],[.961671,.410731,.298221,1],[.964093,.418008,.294853,1],[.966399,.425327,.291676,1],[.968586,.43269,.288696,1],[.970654,.440095,.285926,1],[.972603,.44754,.28338,1],[.974431,.455025,.281067,1],[.976139,.462547,.279003,1],[.977725,.470107,.277198,1],[.979188,.477703,.275666,1],[.980529,.485332,.274422,1],[.981747,.492995,.273476,1],[.98284,.50069,.272842,1],[.983808,.508415,.272532,1],[.984653,.516168,.27256,1],[.985373,.523948,.272937,1],[.985966,.531754,.273673,1],[.986436,.539582,.274779,1],[.98678,.547434,.276264,1],[.986998,.555305,.278135,1],[.987091,.563195,.280401,1],[.987061,.5711,.283066,1],[.986907,.579019,.286137,1],[.986629,.58695,.289615,1],[.986229,.594891,.293503,1],[.985709,.602839,.297802,1],[.985069,.610792,.302512,1],[.98431,.618748,.307632,1],[.983435,.626704,.313159,1],[.982445,.634657,.319089,1],[.981341,.642606,.32542,1],[.98013,.650546,.332144,1],[.978812,.658475,.339257,1],[.977392,.666391,.346753,1],[.97587,.67429,.354625,1],[.974252,.68217,.362865,1],[.972545,.690026,.371466,1],[.97075,.697856,.380419,1],[.968873,.705658,.389718,1],[.966921,.713426,.399353,1],[.964901,.721157,.409313,1],[.962815,.728851,.419594,1],[.960677,.7365,.430181,1],[.95849,.744103,.44107,1],[.956263,.751656,.452248,1],[.954009,.759153,.463702,1],[.951732,.766595,.475429,1],[.949445,.773974,.487414,1],[.947158,.781289,.499647,1],[.944885,.788535,.512116,1],[.942634,.795709,.524811,1],[.940423,.802807,.537717,1],[.938261,.809825,.550825,1],[.936163,.81676,.564121,1],[.934146,.823608,.577591,1],[.932224,.830366,.59122,1],[.930412,.837031,.604997,1],[.928727,.843599,.618904,1],[.927187,.850066,.632926,1],[.925809,.856432,.647047,1],[.92461,.862691,.661249,1],[.923607,.868843,.675517,1],[.92282,.874884,.689832,1],[.922265,.880812,.704174,1],[.921962,.886626,.718523,1],[.92193,.892323,.732859,1],[.922183,.897903,.747163,1],[.922741,.903364,.76141,1],[.92362,.908706,.77558,1],[.924837,.913928,.789648,1],[.926405,.919031,.80359,1],[.92834,.924015,.817381,1],[.930655,.928881,.830995,1],[.93336,.933631,.844405,1],[.936466,.938267,.857583,1],[.939982,.942791,.870499,1],[.943914,.947207,.883122,1],[.948267,.951519,.895421,1],[.953044,.955732,.907359,1],[.958246,.959852,.918901,1],[.963869,.963887,.930004,1],[.969909,.967845,.940623,1],[.976355,.971737,.950704,1],[.983195,.97558,.960181,1],[.990402,.979395,.968966,1],[.99793,.983217,.97692,1]];break;default:throw Error("No such colormap '"+t+"'")}}}onInit(){this.wrapper||this.createWrapper(),this.canvasContainer||this.createCanvas(),this.container=this.wavesurfer.getWrapper(),this.container.appendChild(this.wrapper),this.wavesurfer.options.fillParent&&Object.assign(this.wrapper.style,{width:"100%",overflowX:"hidden",overflowY:"hidden"}),this.subscriptions.push(this.wavesurfer.on("timeupdate",(e=>{this.updatePosition(e)}))),this.subscriptions.push(this.wavesurfer.on("scroll",(()=>{this.handleScroll()}))),this.subscriptions.push(this.wavesurfer.on("redraw",(()=>this.handleRedraw()))),this.subscriptions.push(this.wavesurfer.on("ready",(()=>{const e=this.wavesurfer.getDecodedData();e&&this.render(e)}))),this.wavesurfer.getDecodedData()&&setTimeout((()=>{this.render(this.wavesurfer.getDecodedData())}),0)}createWrapper(){this.wrapper=s("div",{style:{display:"block",position:"relative",userSelect:"none"}}),this.options.labels&&(this.labelsEl=s("canvas",{part:"spec-labels",style:{position:"absolute",zIndex:9,width:"55px",height:"100%"}},this.wrapper)),this.wrapper.addEventListener("click",this._onWrapperClick)}createCanvas(){this.canvasContainer=s("div",{style:{position:"absolute",left:0,top:0,width:"100%",height:"100%",zIndex:4}},this.wrapper)}handleRedraw(){const e=this.pixelsPerSecond;this.pixelsPerSecond=this.getPixelsPerSecond(),e!==this.pixelsPerSecond&&this.segments.size>0&&this.updateSegmentPositions(e,this.pixelsPerSecond),this.scheduleRender()}updateSegmentPositions(e,t){for(const e of this.segments.values())if(e.startPixel=e.startTime*t,e.endPixel=e.endTime*t,e.canvas){const t=e.endPixel-e.startPixel;e.canvas.style.left=`${e.startPixel}px`,e.canvas.style.width=`${t}px`}const i=t/e;(i<.5||i>2)&&this.scheduleSegmentQualityUpdate()}scheduleSegmentQualityUpdate(){this.qualityUpdateTimeout&&clearTimeout(this.qualityUpdateTimeout),this.qualityUpdateTimeout=window.setTimeout((()=>{this.updateVisibleSegmentQuality()}),500)}updateVisibleSegmentQuality(){return e(this,void 0,void 0,(function*(){var e;if(!this.buffer)return;const t=null===(e=this.wavesurfer)||void 0===e?void 0:e.getWrapper();if(!t)return;const i=this.getScrollLeft(t),n=this.getViewportWidth(t),s=this.getPixelsPerSecond(),r=i/s,a=(i+n)/s,o=Array.from(this.segments.values()).filter((e=>e.startTime<a&&e.endTime>r));if(0!==o.length)for(const e of o)e.canvas&&(yield this.renderSegment(e))}))}getScrollLeft(e){var t;if(e.scrollLeft)return e.scrollLeft;if(null===(t=e.parentElement)||void 0===t?void 0:t.scrollLeft)return e.parentElement.scrollLeft;if(document.documentElement.scrollLeft)return document.documentElement.scrollLeft;if(document.body.scrollLeft)return document.body.scrollLeft;if(window.scrollX)return window.scrollX;if(window.pageXOffset)return window.pageXOffset;let i=e.parentElement;for(;i;){const e=window.getComputedStyle(i);if(("scroll"===e.overflowX||"auto"===e.overflowX)&&i.scrollLeft>0)return i.scrollLeft;i=i.parentElement}return 0}getViewportWidth(e){var t,i;const n=e.offsetWidth||e.clientWidth,s=(null===(t=e.parentElement)||void 0===t?void 0:t.offsetWidth)||(null===(i=e.parentElement)||void 0===i?void 0:i.clientWidth),r=window.innerWidth;return s&&s<n?s:Math.min(n||800,.8*r)}handleScroll(){var e,t;const i=null===(e=this.wavesurfer)||void 0===e?void 0:e.getWrapper();let n=0;if(null==i?void 0:i.scrollLeft)n=i.scrollLeft;else if(null===(t=null==i?void 0:i.parentElement)||void 0===t?void 0:t.scrollLeft)n=i.parentElement.scrollLeft;else if(document.documentElement.scrollLeft||document.body.scrollLeft)n=document.documentElement.scrollLeft||document.body.scrollLeft;else if(window.scrollX||window.pageXOffset)n=window.scrollX||window.pageXOffset;else if(i){let e=i.parentElement;for(;e&&0===n;){const t=window.getComputedStyle(e);if(("scroll"===t.overflowX||"auto"===t.overflowX)&&e.scrollLeft>0){n=e.scrollLeft;break}e=e.parentElement}}this.getPixelsPerSecond(),this.scheduleRender()}updatePosition(e){this.currentPosition=e,this.scheduleRender()}scheduleRender(){this.renderTimeout&&clearTimeout(this.renderTimeout),this.renderTimeout=window.setTimeout((()=>{this.renderVisibleWindow()}),16)}renderVisibleWindow(){return e(this,void 0,void 0,(function*(){var e;if(!this.isRendering&&this.buffer){this.isRendering=!0;try{const t=null===(e=this.wavesurfer)||void 0===e?void 0:e.getWrapper();if(!t)return;const i=this.getScrollLeft(t),n=this.getViewportWidth(t),s=this.getPixelsPerSecond(),r=(this.buffer.duration,i/s),a=(i+n)/s,o=a-r;let l=Math.min(2,.5*o);o>30&&(console.warn(`⚠️ Large visible duration: ${o.toFixed(1)}s - limiting buffer`),l=1);const h=Math.max(0,r-l),f=Math.min(this.buffer.duration,a+l);yield this.generateSegments(h,f)}finally{this.isRendering=!1}}}))}generateSegments(t,i){return e(this,void 0,void 0,(function*(){if(!this.buffer)return;const e=this.getPixelsPerSecond(),n=this.getWidth(),s=this.buffer.duration,r=this.isProgressiveLoading&&i-t<=35,a=!r&&s*e<=n&&s<=60;let o,l;if(r?(l=i-t,o=l*e,console.log(`🔧 Progressive loading mode: duration=${l.toFixed(1)}s, pixels=${o.toFixed(0)}px`)):a?(o=n,l=s,console.log(`🔧 Fill container mode: duration=${l.toFixed(1)}s, pixels=${o.toFixed(0)}px`)):(o=15e3,l=o/e,console.log(`🔧 Viewport rendering mode: duration=${l.toFixed(1)}s, pixels=${o.toFixed(0)}px`)),this.segments.size>0)for(const[e,t]of this.segments);const h=this.findUncoveredTimeRanges(t,i,l);if(0!==h.length){for(const t of h)for(let i=t.start;i<t.end;i+=l){const s=i,r=Math.min(i+l,t.end,this.buffer.duration),o=`${Math.floor(10*s)}_${Math.floor(10*r)}`;if(this.segments.has(o))continue;performance.now();const h=yield this.calculateFrequencies(s,r);if(performance.now(),h&&h.length>0){const t={startTime:s,endTime:r,startPixel:a?0:s*e,endPixel:a?n:r*e,frequencies:h};this.segments.set(o,t),performance.now(),yield this.renderSegment(t),performance.now(),this.emitProgress()}}this.isProgressiveLoading||this.startProgressiveLoading()}}))}findUncoveredTimeRanges(e,t,i){const n=Array.from(this.segments.values()).sort(((e,t)=>e.startTime-t.startTime)),s=[];let r=e;for(const e of n){if(r<e.startTime&&r<t){const i=Math.min(e.startTime,t);s.push({start:r,end:i})}if(r=Math.max(r,e.endTime),r>=t)break}return r<t&&s.push({start:r,end:t}),s}startProgressiveLoading(){!this.isProgressiveLoading&&this.buffer&&this.progressiveLoading&&(this.isProgressiveLoading=!0,this.nextProgressiveSegmentTime=0,this.progressiveLoadTimeout=window.setTimeout((()=>{this.progressiveLoadNextSegment()}),1e3))}progressiveLoadNextSegment(){return e(this,void 0,void 0,(function*(){if(!this.buffer||!this.isProgressiveLoading)return;const e=this.buffer.duration;if(this.nextProgressiveSegmentTime>=e)return void this._stopProgressiveLoading();const t=this.nextProgressiveSegmentTime,i=Math.min(t+30,e);console.log(`📊 Progressive segment calculation: start=${t.toFixed(2)}s, end=${i.toFixed(2)}s, duration=${30..toFixed(2)}s`);const n=`${Math.floor(10*t)}_${Math.floor(10*i)}`;if(this.segments.has(n))console.log(`⏭️ Progressive segment already loaded: ${t.toFixed(1)}s - ${i.toFixed(1)}s`);else try{console.log(`🔄 Progressive loading segment: ${t.toFixed(1)}s - ${i.toFixed(1)}s`),yield this.generateSegments(t,i),console.log(`✅ Progressive loaded segment: ${t.toFixed(1)}s - ${i.toFixed(1)}s`)}catch(e){return console.warn("Progressive loading failed:",e),void this._stopProgressiveLoading()}this.nextProgressiveSegmentTime=i,this.progressiveLoadTimeout=window.setTimeout((()=>{this.progressiveLoadNextSegment()}),2e3)}))}_stopProgressiveLoading(){this.isProgressiveLoading=!1,this.progressiveLoadTimeout&&(clearTimeout(this.progressiveLoadTimeout),this.progressiveLoadTimeout=null)}getLoadingProgress(){if(!this.buffer)return 0;const e=this.buffer.duration;if(0===e)return 100;if(!this.isProgressiveLoading&&0===this.segments.size)return 0;const t=Math.min(100,this.nextProgressiveSegmentTime/e*100);return!this.isProgressiveLoading&&this.nextProgressiveSegmentTime>=e?100:t}emitProgress(){const e=this.getLoadingProgress()/100;this.emit("progress",e)}calculateFrequencies(t,i){return e(this,void 0,void 0,(function*(){if(!this.buffer)return[];const e=performance.now();if(this.buffer.sampleRate,!this.options.splitChannels||this.buffer.numberOfChannels,this.worker)try{const e=yield this.calculateFrequenciesWithWorker(t,i);performance.now();return e}catch(e){console.warn("Worker calculation failed, falling back to main thread:",e)}return this.calculateFrequenciesMainThread(t,i)}))}calculateFrequenciesWithWorker(t,i){return e(this,void 0,void 0,(function*(){if(!this.buffer||!this.worker)throw new Error("Worker not available");const e=this.buffer.sampleRate,n=this.options.splitChannels?this.buffer.numberOfChannels:1;let s=this.noverlap;if(!s){const n=(i-t)*this.getPixelsPerSecond(),r=Math.floor(t*e),a=(Math.floor(i*e)-r)/n;s=Math.max(0,Math.round(this.fftSamples-a))}const r=[];for(let e=0;e<n;e++)r.push(this.buffer.getChannelData(e));const a=`${Date.now()}_${Math.random()}`,o=new Promise(((e,t)=>{this.workerPromises.set(a,{resolve:e,reject:t}),setTimeout((()=>{this.workerPromises.has(a)&&(this.workerPromises.delete(a),t(new Error("Worker timeout")))}),3e4)}));return this.worker.postMessage({type:"calculateFrequencies",id:a,audioData:r,options:{startTime:t,endTime:i,sampleRate:e,fftSamples:this.fftSamples,windowFunc:this.windowFunc,alpha:this.alpha,noverlap:s,scale:this.scale,gainDB:this.gainDB,rangeDB:this.rangeDB,splitChannels:this.options.splitChannels||!1}}),o}))}calculateFrequenciesMainThread(t,i){return e(this,void 0,void 0,(function*(){if(!this.buffer)return[];const e=this.buffer.sampleRate,n=Math.floor(t*e),s=Math.floor(i*e),r=this.options.splitChannels?this.buffer.numberOfChannels:1;this.fft||(this.fft=new b(this.fftSamples,e,this.windowFunc,this.alpha));let a=this.noverlap;if(!a){const e=(s-n)/((i-t)*this.getPixelsPerSecond());a=Math.max(0,Math.round(this.fftSamples-e))}const o=.5*this.fftSamples;a=Math.min(a,o);const l=Math.max(64,.25*this.fftSamples),h=Math.max(l,this.fftSamples-a),f=[];performance.now();for(let t=0;t<r;t++){const i=this.buffer.getChannelData(t),r=[];for(let t=n;t+this.fftSamples<s;t+=h){const n=i.slice(t,t+this.fftSamples);let s=this.fft.calculateSpectrum(n);const a=this.getFilterBank(e);a&&(s=g(s,a));const o=new Uint8Array(s.length),l=this.gainDB+this.rangeDB;for(let e=0;e<s.length;e++){const t=s[e]>1e-12?s[e]:1e-12,i=20*Math.log10(t);i<-l?o[e]=0:i>-this.gainDB?o[e]=255:o[e]=Math.round((i+this.gainDB)/this.rangeDB*255)}r.push(o)}f.push(r)}return performance.now(),f}))}renderSegment(t){return e(this,void 0,void 0,(function*(){var e;const i=t.endPixel-t.startPixel,n=this.height*t.frequencies.length,s=document.createElement("canvas");s.width=Math.round(i),s.height=Math.round(n),s.style.position="absolute",s.style.left=`${t.startPixel}px`,s.style.top="0",s.style.width=`${i}px`,s.style.height=`${n}px`;const r=s.getContext("2d");if(!r)return;const a=(null===(e=this.buffer)||void 0===e?void 0:e.sampleRate)?this.buffer.sampleRate/2:0,o=this.frequencyMin,l=this.frequencyMax||a;for(let e=0;e<t.frequencies.length;e++)yield this.renderChannelToCanvas(t.frequencies[e],r,i,this.height,e*this.height,a,o,l);t.canvas=s,this.canvasContainer.appendChild(s)}))}renderChannelToCanvas(t,i,n,s,r,a,o,l){return e(this,void 0,void 0,(function*(){if(0===t.length)return;const e=t[0].length,h=new ImageData(t.length,e),f=h.data;for(let i=0;i<t.length;i++){const n=t[i];for(let s=0;s<e;s++){const r=Math.min(255,Math.max(0,n[s])),a=this.colorMap[r],o=4*((e-s-1)*t.length+i);f[o]=255*a[0],f[o+1]=255*a[1],f[o+2]=255*a[2],f[o+3]=255*a[3]}}const u=p(o,this.scale)/p(a,this.scale),c=p(l,this.scale)/p(a,this.scale),d=Math.min(1,c),m=s*d/c,g=r+s*(1-d/c),b=Math.round(e*(1-d)),w=Math.round(e*(d-u)),v=yield createImageBitmap(h,0,b,t.length,w);i.drawImage(v,0,g,n,m),"close"in v&&v.close()}))}clearAllSegments(){for(const e of this.segments.values())e.canvas&&e.canvas.remove();this.segments.clear()}getFilterBank(e){switch(this.scale){case"mel":return m(this.numMelFilters,this.fftSamples,e,a,o);case"logarithmic":return m(this.numLogFilters,this.fftSamples,e,l,h);case"bark":return m(this.numBarkFilters,this.fftSamples,e,f,u);case"erb":return m(this.numErbFilters,this.fftSamples,e,c,d);default:return null}}freqType(e){return e>=1e3?(e/1e3).toFixed(1):Math.round(e)}unitType(e){return e>=1e3?"kHz":"Hz"}getLabelFrequency(e,t){const i=p(this.frequencyMin,this.scale);return function(e,t){switch(t){case"mel":return o(e);case"logarithmic":return h(e);case"bark":return u(e);case"erb":return d(e);default:return e}}(i+e/t*(p(this.frequencyMax,this.scale)-i),this.scale)}loadLabels(e,t,i,n,s,r,a,o,l){e=e||"rgba(68,68,68,0)",t=t||"12px",i=i||"12px",n=n||"Helvetica",s=s||"#fff",r=r||"#fff",a=a||"center";const h=this.height||512,f=h/256*5;this.frequencyMin;const u=this.labelsEl.getContext("2d"),c=window.devicePixelRatio;if(this.labelsEl.height=this.height*l*c,this.labelsEl.width=55*c,u.scale(c,c),u)for(let o=0;o<l;o++){let l;for(u.fillStyle=e,u.fillRect(0,o*h,55,(1+o)*h),u.fill(),l=0;l<=f;l++){u.textAlign=a,u.textBaseline="middle";const e=this.getLabelFrequency(l,f),c=this.freqType(e),d=this.unitType(e),p=16;let m=(1+o)*h-l/f*h;m=Math.min(Math.max(m,o*h+10),(1+o)*h-10),u.fillStyle=r,u.font=i+" "+n,u.fillText(d,p+24,m),u.fillStyle=s,u.font=t+" "+n,u.fillText(c.toString(),p,m)}}}render(t){return e(this,void 0,void 0,(function*(){this.buffer=t,this.pixelsPerSecond=this.getPixelsPerSecond(),this.frequencyMax=this.frequencyMax||t.sampleRate/2;const e=this.options.splitChannels?t.numberOfChannels:1;this.wrapper.style.height=this.height*e+"px",this.clearAllSegments(),this.nextProgressiveSegmentTime=0,this.options.labels&&this.loadLabels(this.options.labelsBackground,"12px","12px","",this.options.labelsColor,this.options.labelsHzColor||this.options.labelsColor,"center","#specLabels",e),this.scheduleRender(),this.emit("ready")}))}destroy(){this.unAll(),this.renderTimeout&&(clearTimeout(this.renderTimeout),this.renderTimeout=null),this.qualityUpdateTimeout&&(clearTimeout(this.qualityUpdateTimeout),this.qualityUpdateTimeout=null),this.stopProgressiveLoading(),this.nextProgressiveSegmentTime=0,this.worker&&(this.worker.terminate(),this.worker=null),this.workerBlobUrl&&(URL.revokeObjectURL(this.workerBlobUrl),this.workerBlobUrl=null);for(const[e,t]of this.workerPromises)t.reject(new Error("Plugin destroyed"));this.workerPromises.clear(),this.clearAllSegments(),this.canvasContainer&&(this.canvasContainer.remove(),this.canvasContainer=null),this.wrapper&&(this.wrapper.remove(),this.wrapper=null),this.labelsEl&&(this.labelsEl.remove(),this.labelsEl=null),this.container=null,this.buffer=null,this.fft=null,this.isRendering=!1,this.currentPosition=0,this.pixelsPerSecond=0,super.destroy()}getWidth(){var e,t;return(null===(t=null===(e=this.wavesurfer)||void 0===e?void 0:e.getWrapper())||void 0===t?void 0:t.offsetWidth)||0}getPixelsPerSecond(){var e;const t=null===(e=this.wavesurfer)||void 0===e?void 0:e.options.minPxPerSec;if(t&&t>0)return t;if(this.buffer){const e=this.getWidth(),t=e>0?e/this.buffer.duration:100;return Math.max(t,50)}return 50}stopProgressiveLoading(){this.isProgressiveLoading=!1,this.progressiveLoadTimeout&&(clearTimeout(this.progressiveLoadTimeout),this.progressiveLoadTimeout=null)}restartProgressiveLoading(){this.stopProgressiveLoading(),this.nextProgressiveSegmentTime=0,this.progressiveLoading&&this.startProgressiveLoading()}}module.exports=w;
